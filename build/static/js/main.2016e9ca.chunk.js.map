{"version":3,"sources":["components/Image Card/index.js","components/Wrapper/index.js","components/Banner/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","clickHandler","id","image","name","onClick","className","alt","src","Wrapper","props","children","Banner","Navbar","clickMessage","score","topScore","href","App","state","images","isGuessCorrect","handleSaveClick","imageClicked","filter","clicked","handleIncorrectClick","handleCorrectClick","randomize","setState","randomArr","sort","a","b","Math","random","maxScore","resetGame","i","length","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"utEAaeA,MAVf,YAAuD,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC5C,OACE,yBAAKC,QAAS,kBAAMJ,EAAaC,IAAKI,UAAU,QAC9C,yBAAKA,UAAU,iBACb,yBAAKC,IAAKH,EAAMI,IAAKL,O,MCAdM,MAJf,SAAiBC,GACf,OAAO,yBAAKJ,UAAU,WAAWI,EAAMC,WCK1BC,G,MANA,kBACb,yBAAKN,UAAU,uEACb,uBAAGA,UAAU,OAAb,0B,MCWWO,MAbf,YAAkD,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACpC,OACI,yBAAKV,UAAU,8CACf,uBAAGA,UAAU,2BAA4BJ,GAAG,YAAYe,KAAK,KAA7D,gBAEA,wBAAIX,UAAU,2BAA2BJ,GAAG,WAAWY,GAEvD,wBAAIR,UAAU,2BAA2BJ,GAAG,SAA5C,UAA4Da,EAA5D,kBAAkFC,K,OCyGzEE,G,iNAtGbC,MAAQ,CACNC,SACAL,MAPQ,EAQRC,SAPW,EAQXF,aAPe,2BAQfO,gBAAgB,G,EAIpBC,gBAAkB,SAAApB,GAEhB,IAAMkB,EAAS,EAAKD,MAAMC,OAEpBG,EAAeH,EAAOI,QAAO,SAAArB,GAAK,OAAIA,EAAMD,KAAOA,KAGpDqB,EAAa,GAAGE,QAUnB,EAAKC,wBARLH,EAAa,GAAGE,SAAU,EAE1B,EAAKE,qBAEL,EAAKC,UAAUR,GAEf,EAAKS,SAAS,CAAET,a,EAOpBQ,UAAY,SAAAE,GACVA,EAAUC,MAAK,SAACC,EAAGC,GACjB,MAAO,GAAMC,KAAKC,a,EAKtBR,mBAAqB,WACnB,EAAKE,SAAS,CAAER,gBAAgB,IAC5B,EAAKF,MAAMJ,MAAQ,EAAI,EAAKI,MAAMH,UACpC,EAAKa,SAAS,CAAEb,SAAU,EAAKG,MAAMH,SAAW,IAE9C,EAAKG,MAAMJ,MAAQ,GAAK,EAAKI,MAAMiB,SACrC,EAAKP,SAAS,CACZd,MAAO,EAAKI,MAAMJ,MAAQ,EAC1BD,aAAc,uBAGhB,EAAKe,SAAS,CACZd,MAAO,EAAKI,MAAMJ,MAAQ,EAC1BD,aAAc,4B,EAMpBY,qBAAuB,WACrB,EAAKG,SAAS,CACZf,aAAc,yBACdO,gBAAgB,IAGlB,EAAKgB,a,EAIPA,UAAY,SAAAnC,GAEV,IADA,IAAMkB,EAAS,EAAKD,MAAMC,OACjBkB,EAAI,EAAGA,EAAIlB,EAAOmB,OAAQD,IACjClB,EAAOkB,GAAGb,SAAU,EAEtB,EAAKI,SAAS,CAAEd,MAAO,K,wEAKb,IAAD,OAEP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACAD,aAAc0B,KAAKrB,MAAML,aACzBC,MAASyB,KAAKrB,MAAMJ,MACpBC,SAAYwB,KAAKrB,MAAMH,WAEvB,kBAAC,EAAD,MACCI,EAAOqB,KAAI,gBAAEvC,EAAF,EAAEA,GAAIE,EAAN,EAAMA,KAAMD,EAAZ,EAAYA,MAAOsB,EAAnB,EAAmBA,QAAnB,OACV,kBAAC,EAAD,CACAiB,IAAKxC,EACLA,GAAIA,EACJE,KAAMA,EACND,MAAOA,EACPsB,QAASA,EACTxB,aAAc,EAAKqB,0B,GA/FXqB,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2016e9ca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard({ clickHandler, id, image, name }) {\n  return (\n    <div onClick={() => clickHandler(id)} className=\"card\">\n      <div className=\"img-container\">\n        <img alt={name} src={image} />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport './style.css';\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">MARVEL CLICKY GAME!</p>\n  </div>\n);\n\nexport default Banner;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar({clickMessage, score, topScore}) {\n  return (\n      <nav className=\"navbar fixed-top navbar-light bg-secondary\">\n      <a className=\"navbar-brand text-center\"  id=\"clickgame\" href=\"/\">Clicky Game!</a>\n\n      <li className=\"navbar-brand text-center\" id=\"message\">{clickMessage}</li>\n\n      <li className=\"navbar-brand text-center\" id=\"score\">Score: {score} | High Score: {topScore}</li>\n\n      </nav>\n  );\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport ImageCard from \"./components/Image Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Banner from './components/Banner';\nimport Navbar from \"./components/Navbar\";\nimport images from \"./images.json\";\nimport './App.css';\n\nlet score = 0;\nlet topScore = 0;\nlet clickMessage = \"Click an image to begin!\";\n\nclass App extends Component {\n  state = {\n    images,\n    score,\n    topScore,\n    clickMessage,\n    isGuessCorrect: true\n  };\n\n\nhandleSaveClick = id => {\n  // Variable to hold the tiles state.\n  const images = this.state.images;\n  // Search through character tiles to find the one that matches the clicked id.\n  const imageClicked = images.filter(image => image.id === id);\n\n  // If the tile isn't clicked...\n  if (!imageClicked[0].clicked) {\n    // ...set it to now be clicked\n    imageClicked[0].clicked = true;\n    // ...call this function to register the correct guess\n    this.handleCorrectClick();\n    // ... randomize character tiles\n    this.randomize(images);\n\n    this.setState({ images });\n  } else {\n    this.handleIncorrectClick();\n  }\n};\n\n// Function to randomize the characters\nrandomize = randomArr => {\n  randomArr.sort((a, b) => {\n    return 0.5 - Math.random();\n  });\n};\n\n// Handler for correct guesses/clicks\nhandleCorrectClick = () => {\n  this.setState({ isGuessCorrect: true });\n  if (this.state.score + 1 > this.state.topScore) {\n    this.setState({ topScore: this.state.topScore + 1 });\n  }\n  if (this.state.score + 1 >= this.state.maxScore) {\n    this.setState({\n      score: this.state.score + 1,\n      clickMessage: \"CONGRATS! YOU WIN!\"\n    });\n  } else {\n    this.setState({\n      score: this.state.score + 1,\n      clickMessage: \"YOU GUESSED CORRECTLY!\"\n    });\n  }\n};\n\n// Handler for incorrect guesses/clicks\nhandleIncorrectClick = () => {\n  this.setState({\n    clickMessage: \"INCORRECT. PLAY AGAIN?\",\n    isGuessCorrect: false\n  });\n  // this.toggleIncorrectAnimation();\n  this.resetGame();\n};\n\n// Resets the game\nresetGame = id => {\n  const images = this.state.images;\n  for (let i = 0; i < images.length; i++) {\n    images[i].clicked = false;\n  }\n  this.setState({ score: 0 });\n};\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    \n    return (\n      <Wrapper>\n        <Navbar\n        clickMessage={this.state.clickMessage}\n        score = {this.state.score}\n        topScore = {this.state.topScore}\n        />\n        <Banner/>\n        {images.map(({id, name, image, clicked }) => (\n          <ImageCard\n          key={id}\n          id={id}\n          name={name}\n          image={image}\n          clicked={clicked}\n          clickHandler={this.handleSaveClick}\n          />\n          ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}